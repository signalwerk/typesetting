{"version":3,"sources":["webpack:////home/travis/build/signalwerk/typesetting/themes/gatsby-theme-signalwerk/src/pages/index.js","webpack:///./src/pages/index.js"],"names":["render","siteTitle","get","this","siteDescription","posts","post","location","props","htmlAttributes","lang","meta","name","content","title","dangerouslySetInnerHTML","__html","html","components","node","className","key","slug","to","author","date","excerpt","React","Component","PageIndex","Fragment","homeQuery"],"mappings":"yRAoEA,E,gLAxDEA,kBACE,IAAMC,EAAYC,IAAIC,KAAtB,sCACMC,EAAkBF,IAAI,KAA5B,4CAIMG,EAAQH,IAAIC,KAAlB,0BACMG,EAAOJ,IAAIC,KAAjB,mBAEA,OACE,uBAAQI,SAAUJ,KAAKK,MAAMD,UAC3B,uBACEE,eAAgB,CAAEC,KAAM,MACxBC,KAAM,CAAC,CAAEC,KAAF,cAAuBC,QAAST,IACvCU,MAAOb,IAGRK,GACC,kBAAC,IAAD,cACE,4BAAKA,cADP,OAGE,yBAAKS,wBAAyB,CAAEC,OAAQV,EAAKW,QAE7C,iCAAaC,WAAY,IACvB,qCACGZ,EAfX,QAqBGD,GACCA,EAAA,KAAU,YAAe,IAAZc,EAAW,EAAXA,KACLL,EAAQZ,IAAIiB,EAAJjB,sBAAd,eACA,OACE,yBAAKkB,UAAL,cAA6BC,IAAKF,SAAYG,MAC5C,wBAAIF,UAAU,gBACZ,uBAAMG,GAAIJ,SAAYG,MAF1B,IAIE,yBAAKF,UAAU,eACb,uBACEI,OAAQL,cADV,OAEEM,KAAMN,cAAiBM,QAGzBN,2BACA,uBAAGC,UAAU,sBAAsBD,cADpC,cAEK,uBAAGJ,wBAAyB,CAAEC,OAAQG,EAAKO,iB,GAhD7CC,IAAMC,W,ICNpBC,E,gLACJ7B,OAAA,WACE,OACE,kBAAC,IAAM8B,SAAP,KACE,kBAAC,EAAU3B,KAAKK,S,GAJAmB,IAAMC,WAYjBG,GAFEF,YAEO,e","file":"component---src-pages-index-js-400b82001e2786c70a46.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport Helmet from 'react-helmet'\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport { MDXProvider } from \"@mdx-js/react\"\n\nimport Meta from '../components/Meta'\nimport Layout from '../components/layout'\nimport './styles.css'\n\nclass Index extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title')\n    const siteDescription = get(\n      this,\n      'props.data.site.siteMetadata.description'\n    )\n    const posts = get(this, 'props.data.posts.edges')\n    const post = get(this, 'props.data.post')\n\n    return (\n      <Layout location={this.props.location}>\n        <Helmet\n          htmlAttributes={{ lang: 'de' }}\n          meta={[{ name: 'description', content: siteDescription }]}\n          title={siteTitle}\n        />\n\n        {post && (\n          <React.Fragment>\n            <h1>{post.frontmatter.title}</h1>\n\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\n\n            <MDXProvider components={{}}>\n              <MDXRenderer>\n                {post.body}\n              </MDXRenderer>\n            </MDXProvider>\n          </React.Fragment>\n        )}\n\n        {posts &&\n          posts.map(({ node }) => {\n            const title = get(node, 'frontmatter.title') || '--no title--'\n            return (\n              <div className=\"Index--item\" key={node.fields.slug}>\n                <h2 className=\"Index--title\">\n                  <Link to={node.fields.slug}>{title}</Link>\n                </h2>\n                <div className=\"Index--meta\">\n                  <Meta\n                    author={node.frontmatter.author}\n                    date={node.frontmatter.date}\n                  />\n                </div>\n                {(node.frontmatter.description && (\n                  <p className=\"Index--description\">{node.frontmatter.description}</p>\n                )) || <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />}\n              </div>\n            )\n          })}\n      </Layout>\n    )\n  }\n}\n\nexport default Index\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        authorUrl\n      }\n    }\n    post: mdx(fields: {slug: {eq: \"root\"}}) {\n      id\n      excerpt\n      body\n      frontmatter {\n        title\n        author\n        tags\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n      wordCount {\n        words\n      }\n    }\n    posts: allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true }, hideInMenu: { ne: true } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title\n            author\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Index from 'gatsby-theme-signalwerk/src/pages'\n\nclass PageIndex extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Index {...this.props} />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default PageIndex\n\nexport const homeQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        authorUrl\n      }\n    }\n    post: mdx(fields: { slug: { eq: \"root\" } }) {\n      id\n      excerpt\n      body\n      frontmatter {\n        title\n        author\n        tags\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n      wordCount {\n        words\n      }\n    }\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true }, hideInMenu: { ne: true } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title\n            author\n            tags\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}